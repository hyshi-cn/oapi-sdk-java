// Code generated by lark suite oapi sdk gen
package ext.feishu.oapi.service.sheets.v2;

import ext.feishu.oapi.core.Config;
import ext.feishu.oapi.core.api.AccessTokenType;
import ext.feishu.oapi.core.api.Api;
import ext.feishu.oapi.core.api.ReqCaller;
import ext.feishu.oapi.core.api.request.Request;
import ext.feishu.oapi.core.api.request.RequestOptFn;
import ext.feishu.oapi.core.api.response.EmptyData;
import ext.feishu.oapi.core.api.response.Response;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsConditionFormatsBatchCreateReqBody;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsConditionFormatsBatchCreateResult;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsConditionFormatsBatchDeleteReqBody;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsConditionFormatsBatchDeleteResult;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsConditionFormatsBatchGetResult;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsConditionFormatsBatchUpdateReqBody;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsConditionFormatsBatchUpdateResult;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsDataValidationCreateReqBody;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsDataValidationDeleteReqBody;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsDataValidationDeleteResult;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsDataValidationGetResult;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsDataValidationUpdateReqBody;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsDataValidationUpdateResult;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsDimensionRangeAddReqBody;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsDimensionRangeAddResult;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsDimensionRangeDeleteReqBody;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsDimensionRangeDeleteResult;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsDimensionRangeUpdateReqBody;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsImportReqBody;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsImportResult;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsImportResultResult;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsInsertDimensionRangeReqBody;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsMergeCellsReqBody;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsMergeCellsResult;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsMetainfoResult;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsProtectedRangeBatchCreateReqBody;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsProtectedRangeBatchCreateResult;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsProtectedRangeBatchDeleteReqBody;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsProtectedRangeBatchDeleteResult;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsProtectedRangeBatchGetResult;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsProtectedRangeBatchUpdateReqBody;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsProtectedRangeBatchUpdateResult;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsSheetsBatchUpdateReqBody;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsSheetsBatchUpdateResult;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsSheetsUpdatePropertiesReqBody;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsSheetsUpdatePropertiesResult;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsStyleUpdateReqBody;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsStyleUpdateResult;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsStylesBatchUpdateReqBody;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsStylesBatchUpdateResult;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsUnmergeCellsReqBody;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsUnmergeCellsResult;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsValuesAppendReqBody;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsValuesAppendResult;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsValuesBatchGetResult;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsValuesBatchUpdateReqBody;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsValuesBatchUpdateResult;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsValuesGetResult;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsValuesImageReqBody;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsValuesImageResult;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsValuesPrependReqBody;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsValuesPrependResult;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsValuesUpdateReqBody;
import ext.feishu.oapi.service.sheets.v2.model.SpreadsheetsValuesUpdateResult;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SheetsService {

    private final Config        config;
    private final Spreadsheetss spreadsheetss;

    public SheetsService(Config config) {
        this.config = config;
        this.spreadsheetss = new Spreadsheetss(this);
    }

    public Spreadsheetss getSpreadsheetss() {
        return spreadsheetss;
    }

    public static class Spreadsheetss {

        private final SheetsService service;

        public Spreadsheetss(SheetsService service) {
            this.service = service;
        }
    
        public SpreadsheetsConditionFormatsBatchCreateReqCall conditionFormatsBatchCreate(SpreadsheetsConditionFormatsBatchCreateReqBody body, RequestOptFn... optFns) {
            return new SpreadsheetsConditionFormatsBatchCreateReqCall(this, body, optFns);
        }
    
        public SpreadsheetsConditionFormatsBatchDeleteReqCall conditionFormatsBatchDelete(SpreadsheetsConditionFormatsBatchDeleteReqBody body, RequestOptFn... optFns) {
            return new SpreadsheetsConditionFormatsBatchDeleteReqCall(this, body, optFns);
        }
    
        public SpreadsheetsConditionFormatsBatchGetReqCall conditionFormatsBatchGet(RequestOptFn... optFns) {
            return new SpreadsheetsConditionFormatsBatchGetReqCall(this, optFns);
        }
    
        public SpreadsheetsConditionFormatsBatchUpdateReqCall conditionFormatsBatchUpdate(SpreadsheetsConditionFormatsBatchUpdateReqBody body, RequestOptFn... optFns) {
            return new SpreadsheetsConditionFormatsBatchUpdateReqCall(this, body, optFns);
        }
    
        public SpreadsheetsDataValidationCreateReqCall dataValidationCreate(SpreadsheetsDataValidationCreateReqBody body, RequestOptFn... optFns) {
            return new SpreadsheetsDataValidationCreateReqCall(this, body, optFns);
        }
    
        public SpreadsheetsDataValidationDeleteReqCall dataValidationDelete(SpreadsheetsDataValidationDeleteReqBody body, RequestOptFn... optFns) {
            return new SpreadsheetsDataValidationDeleteReqCall(this, body, optFns);
        }
    
        public SpreadsheetsDataValidationGetReqCall dataValidationGet(RequestOptFn... optFns) {
            return new SpreadsheetsDataValidationGetReqCall(this, optFns);
        }
    
        public SpreadsheetsDataValidationUpdateReqCall dataValidationUpdate(SpreadsheetsDataValidationUpdateReqBody body, RequestOptFn... optFns) {
            return new SpreadsheetsDataValidationUpdateReqCall(this, body, optFns);
        }
    
        public SpreadsheetsDimensionRangeAddReqCall dimensionRangeAdd(SpreadsheetsDimensionRangeAddReqBody body, RequestOptFn... optFns) {
            return new SpreadsheetsDimensionRangeAddReqCall(this, body, optFns);
        }
    
        public SpreadsheetsDimensionRangeDeleteReqCall dimensionRangeDelete(SpreadsheetsDimensionRangeDeleteReqBody body, RequestOptFn... optFns) {
            return new SpreadsheetsDimensionRangeDeleteReqCall(this, body, optFns);
        }
    
        public SpreadsheetsDimensionRangeUpdateReqCall dimensionRangeUpdate(SpreadsheetsDimensionRangeUpdateReqBody body, RequestOptFn... optFns) {
            return new SpreadsheetsDimensionRangeUpdateReqCall(this, body, optFns);
        }
    
        public SpreadsheetsImportReqCall import_(SpreadsheetsImportReqBody body, RequestOptFn... optFns) {
            return new SpreadsheetsImportReqCall(this, body, optFns);
        }
    
        public SpreadsheetsImportResultReqCall importResult(RequestOptFn... optFns) {
            return new SpreadsheetsImportResultReqCall(this, optFns);
        }
    
        public SpreadsheetsInsertDimensionRangeReqCall insertDimensionRange(SpreadsheetsInsertDimensionRangeReqBody body, RequestOptFn... optFns) {
            return new SpreadsheetsInsertDimensionRangeReqCall(this, body, optFns);
        }
    
        public SpreadsheetsMergeCellsReqCall mergeCells(SpreadsheetsMergeCellsReqBody body, RequestOptFn... optFns) {
            return new SpreadsheetsMergeCellsReqCall(this, body, optFns);
        }
    
        public SpreadsheetsMetainfoReqCall metainfo(RequestOptFn... optFns) {
            return new SpreadsheetsMetainfoReqCall(this, optFns);
        }
    
        public SpreadsheetsProtectedRangeBatchCreateReqCall protectedRangeBatchCreate(SpreadsheetsProtectedRangeBatchCreateReqBody body, RequestOptFn... optFns) {
            return new SpreadsheetsProtectedRangeBatchCreateReqCall(this, body, optFns);
        }
    
        public SpreadsheetsProtectedRangeBatchDeleteReqCall protectedRangeBatchDelete(SpreadsheetsProtectedRangeBatchDeleteReqBody body, RequestOptFn... optFns) {
            return new SpreadsheetsProtectedRangeBatchDeleteReqCall(this, body, optFns);
        }
    
        public SpreadsheetsProtectedRangeBatchGetReqCall protectedRangeBatchGet(RequestOptFn... optFns) {
            return new SpreadsheetsProtectedRangeBatchGetReqCall(this, optFns);
        }
    
        public SpreadsheetsProtectedRangeBatchUpdateReqCall protectedRangeBatchUpdate(SpreadsheetsProtectedRangeBatchUpdateReqBody body, RequestOptFn... optFns) {
            return new SpreadsheetsProtectedRangeBatchUpdateReqCall(this, body, optFns);
        }
    
        public SpreadsheetsSheetsBatchUpdateReqCall sheetsBatchUpdate(SpreadsheetsSheetsBatchUpdateReqBody body, RequestOptFn... optFns) {
            return new SpreadsheetsSheetsBatchUpdateReqCall(this, body, optFns);
        }
    
        public SpreadsheetsSheetsUpdatePropertiesReqCall sheetsUpdateProperties(SpreadsheetsSheetsUpdatePropertiesReqBody body, RequestOptFn... optFns) {
            return new SpreadsheetsSheetsUpdatePropertiesReqCall(this, body, optFns);
        }
    
        public SpreadsheetsStyleUpdateReqCall styleUpdate(SpreadsheetsStyleUpdateReqBody body, RequestOptFn... optFns) {
            return new SpreadsheetsStyleUpdateReqCall(this, body, optFns);
        }
    
        public SpreadsheetsStylesBatchUpdateReqCall stylesBatchUpdate(SpreadsheetsStylesBatchUpdateReqBody body, RequestOptFn... optFns) {
            return new SpreadsheetsStylesBatchUpdateReqCall(this, body, optFns);
        }
    
        public SpreadsheetsUnmergeCellsReqCall unmergeCells(SpreadsheetsUnmergeCellsReqBody body, RequestOptFn... optFns) {
            return new SpreadsheetsUnmergeCellsReqCall(this, body, optFns);
        }
    
        public SpreadsheetsValuesAppendReqCall valuesAppend(SpreadsheetsValuesAppendReqBody body, RequestOptFn... optFns) {
            return new SpreadsheetsValuesAppendReqCall(this, body, optFns);
        }
    
        public SpreadsheetsValuesBatchGetReqCall valuesBatchGet(RequestOptFn... optFns) {
            return new SpreadsheetsValuesBatchGetReqCall(this, optFns);
        }
    
        public SpreadsheetsValuesBatchUpdateReqCall valuesBatchUpdate(SpreadsheetsValuesBatchUpdateReqBody body, RequestOptFn... optFns) {
            return new SpreadsheetsValuesBatchUpdateReqCall(this, body, optFns);
        }
    
        public SpreadsheetsValuesGetReqCall valuesGet(RequestOptFn... optFns) {
            return new SpreadsheetsValuesGetReqCall(this, optFns);
        }
    
        public SpreadsheetsValuesImageReqCall valuesImage(SpreadsheetsValuesImageReqBody body, RequestOptFn... optFns) {
            return new SpreadsheetsValuesImageReqCall(this, body, optFns);
        }
    
        public SpreadsheetsValuesPrependReqCall valuesPrepend(SpreadsheetsValuesPrependReqBody body, RequestOptFn... optFns) {
            return new SpreadsheetsValuesPrependReqCall(this, body, optFns);
        }
    
        public SpreadsheetsValuesUpdateReqCall valuesUpdate(SpreadsheetsValuesUpdateReqBody body, RequestOptFn... optFns) {
            return new SpreadsheetsValuesUpdateReqCall(this, body, optFns);
        }
    
    }
    public static class SpreadsheetsConditionFormatsBatchCreateReqCall extends ReqCaller<SpreadsheetsConditionFormatsBatchCreateReqBody, SpreadsheetsConditionFormatsBatchCreateResult> {
        private final Spreadsheetss spreadsheetss;
        
        private final SpreadsheetsConditionFormatsBatchCreateReqBody body;
        private final Map<String, Object> pathParams;
        private final List<RequestOptFn> optFns;
        private SpreadsheetsConditionFormatsBatchCreateResult result;
        
        private SpreadsheetsConditionFormatsBatchCreateReqCall(Spreadsheetss spreadsheetss, SpreadsheetsConditionFormatsBatchCreateReqBody body, RequestOptFn... optFns) {
        
            this.body = body;
            this.pathParams = new HashMap<>();
            this.optFns = new ArrayList<>();
            this.optFns.addAll(Arrays.asList(optFns));
            this.result = new SpreadsheetsConditionFormatsBatchCreateResult();
            this.spreadsheetss = spreadsheetss;
        }
        
        public SpreadsheetsConditionFormatsBatchCreateReqCall setSpreadsheetToken(String spreadsheetToken){
            this.pathParams.put("spreadsheetToken", spreadsheetToken);
            return this;
        }

        @Override
        public Response<SpreadsheetsConditionFormatsBatchCreateResult> execute() throws Exception {
            this.optFns.add(Request.setPathParams(this.pathParams));
            Request<SpreadsheetsConditionFormatsBatchCreateReqBody, SpreadsheetsConditionFormatsBatchCreateResult> request = Request.newRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/condition_formats/batch_create", "POST",
                    new AccessTokenType[]{AccessTokenType.Tenant, AccessTokenType.User},
                    this.body, this.result, this.optFns.toArray(new RequestOptFn[]{}));
            return Api.send(this.spreadsheetss.service.config, request);
        }
    }
    public static class SpreadsheetsConditionFormatsBatchDeleteReqCall extends ReqCaller<SpreadsheetsConditionFormatsBatchDeleteReqBody, SpreadsheetsConditionFormatsBatchDeleteResult> {
        private final Spreadsheetss spreadsheetss;
        
        private final SpreadsheetsConditionFormatsBatchDeleteReqBody body;
        private final Map<String, Object> pathParams;
        private final List<RequestOptFn> optFns;
        private SpreadsheetsConditionFormatsBatchDeleteResult result;
        
        private SpreadsheetsConditionFormatsBatchDeleteReqCall(Spreadsheetss spreadsheetss, SpreadsheetsConditionFormatsBatchDeleteReqBody body, RequestOptFn... optFns) {
        
            this.body = body;
            this.pathParams = new HashMap<>();
            this.optFns = new ArrayList<>();
            this.optFns.addAll(Arrays.asList(optFns));
            this.result = new SpreadsheetsConditionFormatsBatchDeleteResult();
            this.spreadsheetss = spreadsheetss;
        }
        
        public SpreadsheetsConditionFormatsBatchDeleteReqCall setSpreadsheetToken(String spreadsheetToken){
            this.pathParams.put("spreadsheetToken", spreadsheetToken);
            return this;
        }

        @Override
        public Response<SpreadsheetsConditionFormatsBatchDeleteResult> execute() throws Exception {
            this.optFns.add(Request.setPathParams(this.pathParams));
            Request<SpreadsheetsConditionFormatsBatchDeleteReqBody, SpreadsheetsConditionFormatsBatchDeleteResult> request = Request.newRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/condition_formats/batch_delete", "DELETE",
                    new AccessTokenType[]{AccessTokenType.Tenant, AccessTokenType.User},
                    this.body, this.result, this.optFns.toArray(new RequestOptFn[]{}));
            return Api.send(this.spreadsheetss.service.config, request);
        }
    }
    public static class SpreadsheetsConditionFormatsBatchGetReqCall extends ReqCaller<Object, SpreadsheetsConditionFormatsBatchGetResult> {
        private final Spreadsheetss spreadsheetss;
        
        private final Map<String, Object> pathParams;
        private final Map<String, Object> queryParams;
        private final List<RequestOptFn> optFns;
        private SpreadsheetsConditionFormatsBatchGetResult result;
        
        private SpreadsheetsConditionFormatsBatchGetReqCall(Spreadsheetss spreadsheetss, RequestOptFn... optFns) {
        
            this.pathParams = new HashMap<>();
            this.queryParams = new HashMap<>();
            this.optFns = new ArrayList<>();
            this.optFns.addAll(Arrays.asList(optFns));
            this.result = new SpreadsheetsConditionFormatsBatchGetResult();
            this.spreadsheetss = spreadsheetss;
        }
        
        public SpreadsheetsConditionFormatsBatchGetReqCall setSpreadsheetToken(String spreadsheetToken){
            this.pathParams.put("spreadsheetToken", spreadsheetToken);
            return this;
        }
        
        public SpreadsheetsConditionFormatsBatchGetReqCall setSheetIds(String... sheetIds){
            this.queryParams.put("sheet_ids", sheetIds);
            return this;
        }

        @Override
        public Response<SpreadsheetsConditionFormatsBatchGetResult> execute() throws Exception {
            this.optFns.add(Request.setPathParams(this.pathParams));
            this.optFns.add(Request.setQueryParams(this.queryParams));
            Request<Object, SpreadsheetsConditionFormatsBatchGetResult> request = Request.newRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/condition_formats", "GET",
                    new AccessTokenType[]{AccessTokenType.Tenant, AccessTokenType.User},
                    null, this.result, this.optFns.toArray(new RequestOptFn[]{}));
            return Api.send(this.spreadsheetss.service.config, request);
        }
    }
    public static class SpreadsheetsConditionFormatsBatchUpdateReqCall extends ReqCaller<SpreadsheetsConditionFormatsBatchUpdateReqBody, SpreadsheetsConditionFormatsBatchUpdateResult> {
        private final Spreadsheetss spreadsheetss;
        
        private final SpreadsheetsConditionFormatsBatchUpdateReqBody body;
        private final Map<String, Object> pathParams;
        private final List<RequestOptFn> optFns;
        private SpreadsheetsConditionFormatsBatchUpdateResult result;
        
        private SpreadsheetsConditionFormatsBatchUpdateReqCall(Spreadsheetss spreadsheetss, SpreadsheetsConditionFormatsBatchUpdateReqBody body, RequestOptFn... optFns) {
        
            this.body = body;
            this.pathParams = new HashMap<>();
            this.optFns = new ArrayList<>();
            this.optFns.addAll(Arrays.asList(optFns));
            this.result = new SpreadsheetsConditionFormatsBatchUpdateResult();
            this.spreadsheetss = spreadsheetss;
        }
        
        public SpreadsheetsConditionFormatsBatchUpdateReqCall setSpreadsheetToken(String spreadsheetToken){
            this.pathParams.put("spreadsheetToken", spreadsheetToken);
            return this;
        }

        @Override
        public Response<SpreadsheetsConditionFormatsBatchUpdateResult> execute() throws Exception {
            this.optFns.add(Request.setPathParams(this.pathParams));
            Request<SpreadsheetsConditionFormatsBatchUpdateReqBody, SpreadsheetsConditionFormatsBatchUpdateResult> request = Request.newRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/condition_formats/batch_update", "POST",
                    new AccessTokenType[]{AccessTokenType.Tenant, AccessTokenType.User},
                    this.body, this.result, this.optFns.toArray(new RequestOptFn[]{}));
            return Api.send(this.spreadsheetss.service.config, request);
        }
    }
    public static class SpreadsheetsDataValidationCreateReqCall extends ReqCaller<SpreadsheetsDataValidationCreateReqBody, EmptyData> {
        private final Spreadsheetss spreadsheetss;
        
        private final SpreadsheetsDataValidationCreateReqBody body;
        private final Map<String, Object> pathParams;
        private final List<RequestOptFn> optFns;
        private EmptyData result;
        
        private SpreadsheetsDataValidationCreateReqCall(Spreadsheetss spreadsheetss, SpreadsheetsDataValidationCreateReqBody body, RequestOptFn... optFns) {
        
            this.body = body;
            this.pathParams = new HashMap<>();
            this.optFns = new ArrayList<>();
            this.optFns.addAll(Arrays.asList(optFns));
            this.result = new EmptyData();
            this.spreadsheetss = spreadsheetss;
        }
        
        public SpreadsheetsDataValidationCreateReqCall setSpreadsheetToken(String spreadsheetToken){
            this.pathParams.put("spreadsheetToken", spreadsheetToken);
            return this;
        }

        @Override
        public Response<EmptyData> execute() throws Exception {
            this.optFns.add(Request.setPathParams(this.pathParams));
            Request<SpreadsheetsDataValidationCreateReqBody, EmptyData> request = Request.newRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/dataValidation", "POST",
                    new AccessTokenType[]{AccessTokenType.Tenant, AccessTokenType.User},
                    this.body, this.result, this.optFns.toArray(new RequestOptFn[]{}));
            return Api.send(this.spreadsheetss.service.config, request);
        }
    }
    public static class SpreadsheetsDataValidationDeleteReqCall extends ReqCaller<SpreadsheetsDataValidationDeleteReqBody, SpreadsheetsDataValidationDeleteResult> {
        private final Spreadsheetss spreadsheetss;
        
        private final SpreadsheetsDataValidationDeleteReqBody body;
        private final Map<String, Object> pathParams;
        private final List<RequestOptFn> optFns;
        private SpreadsheetsDataValidationDeleteResult result;
        
        private SpreadsheetsDataValidationDeleteReqCall(Spreadsheetss spreadsheetss, SpreadsheetsDataValidationDeleteReqBody body, RequestOptFn... optFns) {
        
            this.body = body;
            this.pathParams = new HashMap<>();
            this.optFns = new ArrayList<>();
            this.optFns.addAll(Arrays.asList(optFns));
            this.result = new SpreadsheetsDataValidationDeleteResult();
            this.spreadsheetss = spreadsheetss;
        }
        
        public SpreadsheetsDataValidationDeleteReqCall setSpreadsheetToken(String spreadsheetToken){
            this.pathParams.put("spreadsheetToken", spreadsheetToken);
            return this;
        }

        @Override
        public Response<SpreadsheetsDataValidationDeleteResult> execute() throws Exception {
            this.optFns.add(Request.setPathParams(this.pathParams));
            Request<SpreadsheetsDataValidationDeleteReqBody, SpreadsheetsDataValidationDeleteResult> request = Request.newRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/dataValidation", "DELETE",
                    new AccessTokenType[]{AccessTokenType.Tenant, AccessTokenType.User},
                    this.body, this.result, this.optFns.toArray(new RequestOptFn[]{}));
            return Api.send(this.spreadsheetss.service.config, request);
        }
    }
    public static class SpreadsheetsDataValidationGetReqCall extends ReqCaller<Object, SpreadsheetsDataValidationGetResult> {
        private final Spreadsheetss spreadsheetss;
        
        private final Map<String, Object> pathParams;
        private final List<RequestOptFn> optFns;
        private SpreadsheetsDataValidationGetResult result;
        
        private SpreadsheetsDataValidationGetReqCall(Spreadsheetss spreadsheetss, RequestOptFn... optFns) {
        
            this.pathParams = new HashMap<>();
            this.optFns = new ArrayList<>();
            this.optFns.addAll(Arrays.asList(optFns));
            this.result = new SpreadsheetsDataValidationGetResult();
            this.spreadsheetss = spreadsheetss;
        }
        
        public SpreadsheetsDataValidationGetReqCall setSpreadsheetToken(String spreadsheetToken){
            this.pathParams.put("spreadsheetToken", spreadsheetToken);
            return this;
        }
        public SpreadsheetsDataValidationGetReqCall setRange(String range){
            this.pathParams.put("range", range);
            return this;
        }
        public SpreadsheetsDataValidationGetReqCall setDataValidationType(String dataValidationType){
            this.pathParams.put("dataValidationType", dataValidationType);
            return this;
        }

        @Override
        public Response<SpreadsheetsDataValidationGetResult> execute() throws Exception {
            this.optFns.add(Request.setPathParams(this.pathParams));
            Request<Object, SpreadsheetsDataValidationGetResult> request = Request.newRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/dataValidation", "GET",
                    new AccessTokenType[]{AccessTokenType.Tenant, AccessTokenType.User},
                    null, this.result, this.optFns.toArray(new RequestOptFn[]{}));
            return Api.send(this.spreadsheetss.service.config, request);
        }
    }
    public static class SpreadsheetsDataValidationUpdateReqCall extends ReqCaller<SpreadsheetsDataValidationUpdateReqBody, SpreadsheetsDataValidationUpdateResult> {
        private final Spreadsheetss spreadsheetss;
        
        private final SpreadsheetsDataValidationUpdateReqBody body;
        private final Map<String, Object> pathParams;
        private final List<RequestOptFn> optFns;
        private SpreadsheetsDataValidationUpdateResult result;
        
        private SpreadsheetsDataValidationUpdateReqCall(Spreadsheetss spreadsheetss, SpreadsheetsDataValidationUpdateReqBody body, RequestOptFn... optFns) {
        
            this.body = body;
            this.pathParams = new HashMap<>();
            this.optFns = new ArrayList<>();
            this.optFns.addAll(Arrays.asList(optFns));
            this.result = new SpreadsheetsDataValidationUpdateResult();
            this.spreadsheetss = spreadsheetss;
        }
        
        public SpreadsheetsDataValidationUpdateReqCall setSpreadsheetToken(String spreadsheetToken){
            this.pathParams.put("spreadsheetToken", spreadsheetToken);
            return this;
        }
        public SpreadsheetsDataValidationUpdateReqCall setSheetId(String sheetId){
            this.pathParams.put("sheetId", sheetId);
            return this;
        }
        public SpreadsheetsDataValidationUpdateReqCall setDataValidationId(Integer dataValidationId){
            this.pathParams.put("dataValidationId", dataValidationId);
            return this;
        }

        @Override
        public Response<SpreadsheetsDataValidationUpdateResult> execute() throws Exception {
            this.optFns.add(Request.setPathParams(this.pathParams));
            Request<SpreadsheetsDataValidationUpdateReqBody, SpreadsheetsDataValidationUpdateResult> request = Request.newRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/dataValidation/:sheetId/:dataValidationId", "PUT",
                    new AccessTokenType[]{AccessTokenType.Tenant, AccessTokenType.User},
                    this.body, this.result, this.optFns.toArray(new RequestOptFn[]{}));
            return Api.send(this.spreadsheetss.service.config, request);
        }
    }
    public static class SpreadsheetsDimensionRangeAddReqCall extends ReqCaller<SpreadsheetsDimensionRangeAddReqBody, SpreadsheetsDimensionRangeAddResult> {
        private final Spreadsheetss spreadsheetss;
        
        private final SpreadsheetsDimensionRangeAddReqBody body;
        private final Map<String, Object> pathParams;
        private final List<RequestOptFn> optFns;
        private SpreadsheetsDimensionRangeAddResult result;
        
        private SpreadsheetsDimensionRangeAddReqCall(Spreadsheetss spreadsheetss, SpreadsheetsDimensionRangeAddReqBody body, RequestOptFn... optFns) {
        
            this.body = body;
            this.pathParams = new HashMap<>();
            this.optFns = new ArrayList<>();
            this.optFns.addAll(Arrays.asList(optFns));
            this.result = new SpreadsheetsDimensionRangeAddResult();
            this.spreadsheetss = spreadsheetss;
        }
        
        public SpreadsheetsDimensionRangeAddReqCall setSpreadsheetToken(String spreadsheetToken){
            this.pathParams.put("spreadsheetToken", spreadsheetToken);
            return this;
        }

        @Override
        public Response<SpreadsheetsDimensionRangeAddResult> execute() throws Exception {
            this.optFns.add(Request.setPathParams(this.pathParams));
            Request<SpreadsheetsDimensionRangeAddReqBody, SpreadsheetsDimensionRangeAddResult> request = Request.newRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/dimension_range", "POST",
                    new AccessTokenType[]{AccessTokenType.Tenant, AccessTokenType.User},
                    this.body, this.result, this.optFns.toArray(new RequestOptFn[]{}));
            return Api.send(this.spreadsheetss.service.config, request);
        }
    }
    public static class SpreadsheetsDimensionRangeDeleteReqCall extends ReqCaller<SpreadsheetsDimensionRangeDeleteReqBody, SpreadsheetsDimensionRangeDeleteResult> {
        private final Spreadsheetss spreadsheetss;
        
        private final SpreadsheetsDimensionRangeDeleteReqBody body;
        private final Map<String, Object> pathParams;
        private final List<RequestOptFn> optFns;
        private SpreadsheetsDimensionRangeDeleteResult result;
        
        private SpreadsheetsDimensionRangeDeleteReqCall(Spreadsheetss spreadsheetss, SpreadsheetsDimensionRangeDeleteReqBody body, RequestOptFn... optFns) {
        
            this.body = body;
            this.pathParams = new HashMap<>();
            this.optFns = new ArrayList<>();
            this.optFns.addAll(Arrays.asList(optFns));
            this.result = new SpreadsheetsDimensionRangeDeleteResult();
            this.spreadsheetss = spreadsheetss;
        }
        
        public SpreadsheetsDimensionRangeDeleteReqCall setSpreadsheetToken(String spreadsheetToken){
            this.pathParams.put("spreadsheetToken", spreadsheetToken);
            return this;
        }

        @Override
        public Response<SpreadsheetsDimensionRangeDeleteResult> execute() throws Exception {
            this.optFns.add(Request.setPathParams(this.pathParams));
            Request<SpreadsheetsDimensionRangeDeleteReqBody, SpreadsheetsDimensionRangeDeleteResult> request = Request.newRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/dimension_range", "DELETE",
                    new AccessTokenType[]{AccessTokenType.Tenant, AccessTokenType.User},
                    this.body, this.result, this.optFns.toArray(new RequestOptFn[]{}));
            return Api.send(this.spreadsheetss.service.config, request);
        }
    }
    public static class SpreadsheetsDimensionRangeUpdateReqCall extends ReqCaller<SpreadsheetsDimensionRangeUpdateReqBody, EmptyData> {
        private final Spreadsheetss spreadsheetss;
        
        private final SpreadsheetsDimensionRangeUpdateReqBody body;
        private final Map<String, Object> pathParams;
        private final List<RequestOptFn> optFns;
        private EmptyData result;
        
        private SpreadsheetsDimensionRangeUpdateReqCall(Spreadsheetss spreadsheetss, SpreadsheetsDimensionRangeUpdateReqBody body, RequestOptFn... optFns) {
        
            this.body = body;
            this.pathParams = new HashMap<>();
            this.optFns = new ArrayList<>();
            this.optFns.addAll(Arrays.asList(optFns));
            this.result = new EmptyData();
            this.spreadsheetss = spreadsheetss;
        }
        
        public SpreadsheetsDimensionRangeUpdateReqCall setSpreadsheetToken(String spreadsheetToken){
            this.pathParams.put("spreadsheetToken", spreadsheetToken);
            return this;
        }

        @Override
        public Response<EmptyData> execute() throws Exception {
            this.optFns.add(Request.setPathParams(this.pathParams));
            Request<SpreadsheetsDimensionRangeUpdateReqBody, EmptyData> request = Request.newRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/dimension_range", "PUT",
                    new AccessTokenType[]{AccessTokenType.Tenant, AccessTokenType.User},
                    this.body, this.result, this.optFns.toArray(new RequestOptFn[]{}));
            return Api.send(this.spreadsheetss.service.config, request);
        }
    }
    public static class SpreadsheetsImportReqCall extends ReqCaller<SpreadsheetsImportReqBody, SpreadsheetsImportResult> {
        private final Spreadsheetss spreadsheetss;
        
        private final SpreadsheetsImportReqBody body;
        private final List<RequestOptFn> optFns;
        private SpreadsheetsImportResult result;
        
        private SpreadsheetsImportReqCall(Spreadsheetss spreadsheetss, SpreadsheetsImportReqBody body, RequestOptFn... optFns) {
        
            this.body = body;
            this.optFns = new ArrayList<>();
            this.optFns.addAll(Arrays.asList(optFns));
            this.result = new SpreadsheetsImportResult();
            this.spreadsheetss = spreadsheetss;
        }
        

        @Override
        public Response<SpreadsheetsImportResult> execute() throws Exception {
            Request<SpreadsheetsImportReqBody, SpreadsheetsImportResult> request = Request.newRequest("/open-apis/sheets/v2/import", "POST",
                    new AccessTokenType[]{AccessTokenType.Tenant, AccessTokenType.User},
                    this.body, this.result, this.optFns.toArray(new RequestOptFn[]{}));
            return Api.send(this.spreadsheetss.service.config, request);
        }
    }
    public static class SpreadsheetsImportResultReqCall extends ReqCaller<Object, SpreadsheetsImportResultResult> {
        private final Spreadsheetss spreadsheetss;
        
        private final Map<String, Object> queryParams;
        private final List<RequestOptFn> optFns;
        private SpreadsheetsImportResultResult result;
        
        private SpreadsheetsImportResultReqCall(Spreadsheetss spreadsheetss, RequestOptFn... optFns) {
        
            this.queryParams = new HashMap<>();
            this.optFns = new ArrayList<>();
            this.optFns.addAll(Arrays.asList(optFns));
            this.result = new SpreadsheetsImportResultResult();
            this.spreadsheetss = spreadsheetss;
        }
        
        
        public SpreadsheetsImportResultReqCall setTicket(String ticket){
            this.queryParams.put("ticket", ticket);
            return this;
        }

        @Override
        public Response<SpreadsheetsImportResultResult> execute() throws Exception {
            this.optFns.add(Request.setQueryParams(this.queryParams));
            Request<Object, SpreadsheetsImportResultResult> request = Request.newRequest("/open-apis/sheets/v2/import/result", "GET",
                    new AccessTokenType[]{AccessTokenType.Tenant, AccessTokenType.User},
                    null, this.result, this.optFns.toArray(new RequestOptFn[]{}));
            return Api.send(this.spreadsheetss.service.config, request);
        }
    }
    public static class SpreadsheetsInsertDimensionRangeReqCall extends ReqCaller<SpreadsheetsInsertDimensionRangeReqBody, EmptyData> {
        private final Spreadsheetss spreadsheetss;
        
        private final SpreadsheetsInsertDimensionRangeReqBody body;
        private final Map<String, Object> pathParams;
        private final List<RequestOptFn> optFns;
        private EmptyData result;
        
        private SpreadsheetsInsertDimensionRangeReqCall(Spreadsheetss spreadsheetss, SpreadsheetsInsertDimensionRangeReqBody body, RequestOptFn... optFns) {
        
            this.body = body;
            this.pathParams = new HashMap<>();
            this.optFns = new ArrayList<>();
            this.optFns.addAll(Arrays.asList(optFns));
            this.result = new EmptyData();
            this.spreadsheetss = spreadsheetss;
        }
        
        public SpreadsheetsInsertDimensionRangeReqCall setSpreadsheetToken(String spreadsheetToken){
            this.pathParams.put("spreadsheetToken", spreadsheetToken);
            return this;
        }

        @Override
        public Response<EmptyData> execute() throws Exception {
            this.optFns.add(Request.setPathParams(this.pathParams));
            Request<SpreadsheetsInsertDimensionRangeReqBody, EmptyData> request = Request.newRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/insert_dimension_range", "POST",
                    new AccessTokenType[]{AccessTokenType.Tenant, AccessTokenType.User},
                    this.body, this.result, this.optFns.toArray(new RequestOptFn[]{}));
            return Api.send(this.spreadsheetss.service.config, request);
        }
    }
    public static class SpreadsheetsMergeCellsReqCall extends ReqCaller<SpreadsheetsMergeCellsReqBody, SpreadsheetsMergeCellsResult> {
        private final Spreadsheetss spreadsheetss;
        
        private final SpreadsheetsMergeCellsReqBody body;
        private final Map<String, Object> pathParams;
        private final List<RequestOptFn> optFns;
        private SpreadsheetsMergeCellsResult result;
        
        private SpreadsheetsMergeCellsReqCall(Spreadsheetss spreadsheetss, SpreadsheetsMergeCellsReqBody body, RequestOptFn... optFns) {
        
            this.body = body;
            this.pathParams = new HashMap<>();
            this.optFns = new ArrayList<>();
            this.optFns.addAll(Arrays.asList(optFns));
            this.result = new SpreadsheetsMergeCellsResult();
            this.spreadsheetss = spreadsheetss;
        }
        
        public SpreadsheetsMergeCellsReqCall setSpreadsheetToken(String spreadsheetToken){
            this.pathParams.put("spreadsheetToken", spreadsheetToken);
            return this;
        }

        @Override
        public Response<SpreadsheetsMergeCellsResult> execute() throws Exception {
            this.optFns.add(Request.setPathParams(this.pathParams));
            Request<SpreadsheetsMergeCellsReqBody, SpreadsheetsMergeCellsResult> request = Request.newRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/merge_cells", "POST",
                    new AccessTokenType[]{AccessTokenType.Tenant, AccessTokenType.User},
                    this.body, this.result, this.optFns.toArray(new RequestOptFn[]{}));
            return Api.send(this.spreadsheetss.service.config, request);
        }
    }
    public static class SpreadsheetsMetainfoReqCall extends ReqCaller<Object, SpreadsheetsMetainfoResult> {
        private final Spreadsheetss spreadsheetss;
        
        private final Map<String, Object> pathParams;
        private final Map<String, Object> queryParams;
        private final List<RequestOptFn> optFns;
        private SpreadsheetsMetainfoResult result;
        
        private SpreadsheetsMetainfoReqCall(Spreadsheetss spreadsheetss, RequestOptFn... optFns) {
        
            this.pathParams = new HashMap<>();
            this.queryParams = new HashMap<>();
            this.optFns = new ArrayList<>();
            this.optFns.addAll(Arrays.asList(optFns));
            this.result = new SpreadsheetsMetainfoResult();
            this.spreadsheetss = spreadsheetss;
        }
        
        public SpreadsheetsMetainfoReqCall setSpreadsheetToken(String spreadsheetToken){
            this.pathParams.put("spreadsheetToken", spreadsheetToken);
            return this;
        }
        
        public SpreadsheetsMetainfoReqCall setExtFields(String extFields){
            this.queryParams.put("extFields", extFields);
            return this;
        }

        @Override
        public Response<SpreadsheetsMetainfoResult> execute() throws Exception {
            this.optFns.add(Request.setPathParams(this.pathParams));
            this.optFns.add(Request.setQueryParams(this.queryParams));
            Request<Object, SpreadsheetsMetainfoResult> request = Request.newRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/metainfo", "GET",
                    new AccessTokenType[]{AccessTokenType.Tenant, AccessTokenType.User},
                    null, this.result, this.optFns.toArray(new RequestOptFn[]{}));
            return Api.send(this.spreadsheetss.service.config, request);
        }
    }
    public static class SpreadsheetsProtectedRangeBatchCreateReqCall extends ReqCaller<SpreadsheetsProtectedRangeBatchCreateReqBody, SpreadsheetsProtectedRangeBatchCreateResult> {
        private final Spreadsheetss spreadsheetss;
        
        private final SpreadsheetsProtectedRangeBatchCreateReqBody body;
        private final Map<String, Object> pathParams;
        private final List<RequestOptFn> optFns;
        private SpreadsheetsProtectedRangeBatchCreateResult result;
        
        private SpreadsheetsProtectedRangeBatchCreateReqCall(Spreadsheetss spreadsheetss, SpreadsheetsProtectedRangeBatchCreateReqBody body, RequestOptFn... optFns) {
        
            this.body = body;
            this.pathParams = new HashMap<>();
            this.optFns = new ArrayList<>();
            this.optFns.addAll(Arrays.asList(optFns));
            this.result = new SpreadsheetsProtectedRangeBatchCreateResult();
            this.spreadsheetss = spreadsheetss;
        }
        
        public SpreadsheetsProtectedRangeBatchCreateReqCall setSpreadsheetToken(String spreadsheetToken){
            this.pathParams.put("spreadsheetToken", spreadsheetToken);
            return this;
        }

        @Override
        public Response<SpreadsheetsProtectedRangeBatchCreateResult> execute() throws Exception {
            this.optFns.add(Request.setPathParams(this.pathParams));
            this.optFns.add(Request.setSupportLongDataType());
            Request<SpreadsheetsProtectedRangeBatchCreateReqBody, SpreadsheetsProtectedRangeBatchCreateResult> request = Request.newRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/protected_dimension", "POST",
                    new AccessTokenType[]{AccessTokenType.Tenant, AccessTokenType.User},
                    this.body, this.result, this.optFns.toArray(new RequestOptFn[]{}));
            return Api.send(this.spreadsheetss.service.config, request);
        }
    }
    public static class SpreadsheetsProtectedRangeBatchDeleteReqCall extends ReqCaller<SpreadsheetsProtectedRangeBatchDeleteReqBody, SpreadsheetsProtectedRangeBatchDeleteResult> {
        private final Spreadsheetss spreadsheetss;
        
        private final SpreadsheetsProtectedRangeBatchDeleteReqBody body;
        private final Map<String, Object> pathParams;
        private final List<RequestOptFn> optFns;
        private SpreadsheetsProtectedRangeBatchDeleteResult result;
        
        private SpreadsheetsProtectedRangeBatchDeleteReqCall(Spreadsheetss spreadsheetss, SpreadsheetsProtectedRangeBatchDeleteReqBody body, RequestOptFn... optFns) {
        
            this.body = body;
            this.pathParams = new HashMap<>();
            this.optFns = new ArrayList<>();
            this.optFns.addAll(Arrays.asList(optFns));
            this.result = new SpreadsheetsProtectedRangeBatchDeleteResult();
            this.spreadsheetss = spreadsheetss;
        }
        
        public SpreadsheetsProtectedRangeBatchDeleteReqCall setSpreadsheetToken(String spreadsheetToken){
            this.pathParams.put("spreadsheetToken", spreadsheetToken);
            return this;
        }

        @Override
        public Response<SpreadsheetsProtectedRangeBatchDeleteResult> execute() throws Exception {
            this.optFns.add(Request.setPathParams(this.pathParams));
            Request<SpreadsheetsProtectedRangeBatchDeleteReqBody, SpreadsheetsProtectedRangeBatchDeleteResult> request = Request.newRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/protected_range_batch_del", "DELETE",
                    new AccessTokenType[]{AccessTokenType.Tenant, AccessTokenType.User},
                    this.body, this.result, this.optFns.toArray(new RequestOptFn[]{}));
            return Api.send(this.spreadsheetss.service.config, request);
        }
    }
    public static class SpreadsheetsProtectedRangeBatchGetReqCall extends ReqCaller<Object, SpreadsheetsProtectedRangeBatchGetResult> {
        private final Spreadsheetss spreadsheetss;
        
        private final Map<String, Object> pathParams;
        private final Map<String, Object> queryParams;
        private final List<RequestOptFn> optFns;
        private SpreadsheetsProtectedRangeBatchGetResult result;
        
        private SpreadsheetsProtectedRangeBatchGetReqCall(Spreadsheetss spreadsheetss, RequestOptFn... optFns) {
        
            this.pathParams = new HashMap<>();
            this.queryParams = new HashMap<>();
            this.optFns = new ArrayList<>();
            this.optFns.addAll(Arrays.asList(optFns));
            this.result = new SpreadsheetsProtectedRangeBatchGetResult();
            this.spreadsheetss = spreadsheetss;
        }
        
        public SpreadsheetsProtectedRangeBatchGetReqCall setSpreadsheetToken(String spreadsheetToken){
            this.pathParams.put("spreadsheetToken", spreadsheetToken);
            return this;
        }
        
        public SpreadsheetsProtectedRangeBatchGetReqCall setProtectIds(String... protectIds){
            this.queryParams.put("protectIds", protectIds);
            return this;
        }
        public SpreadsheetsProtectedRangeBatchGetReqCall setMemberType(String memberType){
            this.queryParams.put("memberType", memberType);
            return this;
        }

        @Override
        public Response<SpreadsheetsProtectedRangeBatchGetResult> execute() throws Exception {
            this.optFns.add(Request.setPathParams(this.pathParams));
            this.optFns.add(Request.setQueryParams(this.queryParams));
            Request<Object, SpreadsheetsProtectedRangeBatchGetResult> request = Request.newRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/protected_range_batch_get", "GET",
                    new AccessTokenType[]{AccessTokenType.Tenant, AccessTokenType.User},
                    null, this.result, this.optFns.toArray(new RequestOptFn[]{}));
            return Api.send(this.spreadsheetss.service.config, request);
        }
    }
    public static class SpreadsheetsProtectedRangeBatchUpdateReqCall extends ReqCaller<SpreadsheetsProtectedRangeBatchUpdateReqBody, SpreadsheetsProtectedRangeBatchUpdateResult> {
        private final Spreadsheetss spreadsheetss;
        
        private final SpreadsheetsProtectedRangeBatchUpdateReqBody body;
        private final Map<String, Object> pathParams;
        private final List<RequestOptFn> optFns;
        private SpreadsheetsProtectedRangeBatchUpdateResult result;
        
        private SpreadsheetsProtectedRangeBatchUpdateReqCall(Spreadsheetss spreadsheetss, SpreadsheetsProtectedRangeBatchUpdateReqBody body, RequestOptFn... optFns) {
        
            this.body = body;
            this.pathParams = new HashMap<>();
            this.optFns = new ArrayList<>();
            this.optFns.addAll(Arrays.asList(optFns));
            this.result = new SpreadsheetsProtectedRangeBatchUpdateResult();
            this.spreadsheetss = spreadsheetss;
        }
        
        public SpreadsheetsProtectedRangeBatchUpdateReqCall setSpreadsheetToken(String spreadsheetToken){
            this.pathParams.put("spreadsheetToken", spreadsheetToken);
            return this;
        }

        @Override
        public Response<SpreadsheetsProtectedRangeBatchUpdateResult> execute() throws Exception {
            this.optFns.add(Request.setPathParams(this.pathParams));
            Request<SpreadsheetsProtectedRangeBatchUpdateReqBody, SpreadsheetsProtectedRangeBatchUpdateResult> request = Request.newRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/protected_range_batch_update", "POST",
                    new AccessTokenType[]{AccessTokenType.Tenant, AccessTokenType.User},
                    this.body, this.result, this.optFns.toArray(new RequestOptFn[]{}));
            return Api.send(this.spreadsheetss.service.config, request);
        }
    }
    public static class SpreadsheetsSheetsBatchUpdateReqCall extends ReqCaller<SpreadsheetsSheetsBatchUpdateReqBody, SpreadsheetsSheetsBatchUpdateResult> {
        private final Spreadsheetss spreadsheetss;
        
        private final SpreadsheetsSheetsBatchUpdateReqBody body;
        private final Map<String, Object> pathParams;
        private final List<RequestOptFn> optFns;
        private SpreadsheetsSheetsBatchUpdateResult result;
        
        private SpreadsheetsSheetsBatchUpdateReqCall(Spreadsheetss spreadsheetss, SpreadsheetsSheetsBatchUpdateReqBody body, RequestOptFn... optFns) {
        
            this.body = body;
            this.pathParams = new HashMap<>();
            this.optFns = new ArrayList<>();
            this.optFns.addAll(Arrays.asList(optFns));
            this.result = new SpreadsheetsSheetsBatchUpdateResult();
            this.spreadsheetss = spreadsheetss;
        }
        
        public SpreadsheetsSheetsBatchUpdateReqCall setSpreadsheetToken(String spreadsheetToken){
            this.pathParams.put("spreadsheetToken", spreadsheetToken);
            return this;
        }

        @Override
        public Response<SpreadsheetsSheetsBatchUpdateResult> execute() throws Exception {
            this.optFns.add(Request.setPathParams(this.pathParams));
            this.optFns.add(Request.setSupportLongDataType());
            Request<SpreadsheetsSheetsBatchUpdateReqBody, SpreadsheetsSheetsBatchUpdateResult> request = Request.newRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/sheets_batch_update", "POST",
                    new AccessTokenType[]{AccessTokenType.Tenant, AccessTokenType.User},
                    this.body, this.result, this.optFns.toArray(new RequestOptFn[]{}));
            return Api.send(this.spreadsheetss.service.config, request);
        }
    }
    public static class SpreadsheetsSheetsUpdatePropertiesReqCall extends ReqCaller<SpreadsheetsSheetsUpdatePropertiesReqBody, SpreadsheetsSheetsUpdatePropertiesResult> {
        private final Spreadsheetss spreadsheetss;
        
        private final SpreadsheetsSheetsUpdatePropertiesReqBody body;
        private final Map<String, Object> pathParams;
        private final List<RequestOptFn> optFns;
        private SpreadsheetsSheetsUpdatePropertiesResult result;
        
        private SpreadsheetsSheetsUpdatePropertiesReqCall(Spreadsheetss spreadsheetss, SpreadsheetsSheetsUpdatePropertiesReqBody body, RequestOptFn... optFns) {
        
            this.body = body;
            this.pathParams = new HashMap<>();
            this.optFns = new ArrayList<>();
            this.optFns.addAll(Arrays.asList(optFns));
            this.result = new SpreadsheetsSheetsUpdatePropertiesResult();
            this.spreadsheetss = spreadsheetss;
        }
        
        public SpreadsheetsSheetsUpdatePropertiesReqCall setSpreadsheetToken(String spreadsheetToken){
            this.pathParams.put("spreadsheetToken", spreadsheetToken);
            return this;
        }

        @Override
        public Response<SpreadsheetsSheetsUpdatePropertiesResult> execute() throws Exception {
            this.optFns.add(Request.setPathParams(this.pathParams));
            this.optFns.add(Request.setSupportLongDataType());
            Request<SpreadsheetsSheetsUpdatePropertiesReqBody, SpreadsheetsSheetsUpdatePropertiesResult> request = Request.newRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/properties", "PUT",
                    new AccessTokenType[]{AccessTokenType.Tenant, AccessTokenType.User},
                    this.body, this.result, this.optFns.toArray(new RequestOptFn[]{}));
            return Api.send(this.spreadsheetss.service.config, request);
        }
    }
    public static class SpreadsheetsStyleUpdateReqCall extends ReqCaller<SpreadsheetsStyleUpdateReqBody, SpreadsheetsStyleUpdateResult> {
        private final Spreadsheetss spreadsheetss;
        
        private final SpreadsheetsStyleUpdateReqBody body;
        private final Map<String, Object> pathParams;
        private final List<RequestOptFn> optFns;
        private SpreadsheetsStyleUpdateResult result;
        
        private SpreadsheetsStyleUpdateReqCall(Spreadsheetss spreadsheetss, SpreadsheetsStyleUpdateReqBody body, RequestOptFn... optFns) {
        
            this.body = body;
            this.pathParams = new HashMap<>();
            this.optFns = new ArrayList<>();
            this.optFns.addAll(Arrays.asList(optFns));
            this.result = new SpreadsheetsStyleUpdateResult();
            this.spreadsheetss = spreadsheetss;
        }
        
        public SpreadsheetsStyleUpdateReqCall setSpreadsheetToken(String spreadsheetToken){
            this.pathParams.put("spreadsheetToken", spreadsheetToken);
            return this;
        }

        @Override
        public Response<SpreadsheetsStyleUpdateResult> execute() throws Exception {
            this.optFns.add(Request.setPathParams(this.pathParams));
            Request<SpreadsheetsStyleUpdateReqBody, SpreadsheetsStyleUpdateResult> request = Request.newRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/style", "PUT",
                    new AccessTokenType[]{AccessTokenType.Tenant, AccessTokenType.User},
                    this.body, this.result, this.optFns.toArray(new RequestOptFn[]{}));
            return Api.send(this.spreadsheetss.service.config, request);
        }
    }
    public static class SpreadsheetsStylesBatchUpdateReqCall extends ReqCaller<SpreadsheetsStylesBatchUpdateReqBody, SpreadsheetsStylesBatchUpdateResult> {
        private final Spreadsheetss spreadsheetss;
        
        private final SpreadsheetsStylesBatchUpdateReqBody body;
        private final Map<String, Object> pathParams;
        private final List<RequestOptFn> optFns;
        private SpreadsheetsStylesBatchUpdateResult result;
        
        private SpreadsheetsStylesBatchUpdateReqCall(Spreadsheetss spreadsheetss, SpreadsheetsStylesBatchUpdateReqBody body, RequestOptFn... optFns) {
        
            this.body = body;
            this.pathParams = new HashMap<>();
            this.optFns = new ArrayList<>();
            this.optFns.addAll(Arrays.asList(optFns));
            this.result = new SpreadsheetsStylesBatchUpdateResult();
            this.spreadsheetss = spreadsheetss;
        }
        
        public SpreadsheetsStylesBatchUpdateReqCall setSpreadsheetToken(String spreadsheetToken){
            this.pathParams.put("spreadsheetToken", spreadsheetToken);
            return this;
        }

        @Override
        public Response<SpreadsheetsStylesBatchUpdateResult> execute() throws Exception {
            this.optFns.add(Request.setPathParams(this.pathParams));
            Request<SpreadsheetsStylesBatchUpdateReqBody, SpreadsheetsStylesBatchUpdateResult> request = Request.newRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/styles_batch_update", "PUT",
                    new AccessTokenType[]{AccessTokenType.Tenant, AccessTokenType.User},
                    this.body, this.result, this.optFns.toArray(new RequestOptFn[]{}));
            return Api.send(this.spreadsheetss.service.config, request);
        }
    }
    public static class SpreadsheetsUnmergeCellsReqCall extends ReqCaller<SpreadsheetsUnmergeCellsReqBody, SpreadsheetsUnmergeCellsResult> {
        private final Spreadsheetss spreadsheetss;
        
        private final SpreadsheetsUnmergeCellsReqBody body;
        private final Map<String, Object> pathParams;
        private final List<RequestOptFn> optFns;
        private SpreadsheetsUnmergeCellsResult result;
        
        private SpreadsheetsUnmergeCellsReqCall(Spreadsheetss spreadsheetss, SpreadsheetsUnmergeCellsReqBody body, RequestOptFn... optFns) {
        
            this.body = body;
            this.pathParams = new HashMap<>();
            this.optFns = new ArrayList<>();
            this.optFns.addAll(Arrays.asList(optFns));
            this.result = new SpreadsheetsUnmergeCellsResult();
            this.spreadsheetss = spreadsheetss;
        }
        
        public SpreadsheetsUnmergeCellsReqCall setSpreadsheetToken(String spreadsheetToken){
            this.pathParams.put("spreadsheetToken", spreadsheetToken);
            return this;
        }

        @Override
        public Response<SpreadsheetsUnmergeCellsResult> execute() throws Exception {
            this.optFns.add(Request.setPathParams(this.pathParams));
            Request<SpreadsheetsUnmergeCellsReqBody, SpreadsheetsUnmergeCellsResult> request = Request.newRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/unmerge_cells", "POST",
                    new AccessTokenType[]{AccessTokenType.Tenant, AccessTokenType.User},
                    this.body, this.result, this.optFns.toArray(new RequestOptFn[]{}));
            return Api.send(this.spreadsheetss.service.config, request);
        }
    }
    public static class SpreadsheetsValuesAppendReqCall extends ReqCaller<SpreadsheetsValuesAppendReqBody, SpreadsheetsValuesAppendResult> {
        private final Spreadsheetss spreadsheetss;
        
        private final SpreadsheetsValuesAppendReqBody body;
        private final Map<String, Object> pathParams;
        private final Map<String, Object> queryParams;
        private final List<RequestOptFn> optFns;
        private SpreadsheetsValuesAppendResult result;
        
        private SpreadsheetsValuesAppendReqCall(Spreadsheetss spreadsheetss, SpreadsheetsValuesAppendReqBody body, RequestOptFn... optFns) {
        
            this.body = body;
            this.pathParams = new HashMap<>();
            this.queryParams = new HashMap<>();
            this.optFns = new ArrayList<>();
            this.optFns.addAll(Arrays.asList(optFns));
            this.result = new SpreadsheetsValuesAppendResult();
            this.spreadsheetss = spreadsheetss;
        }
        
        public SpreadsheetsValuesAppendReqCall setSpreadsheetToken(String spreadsheetToken){
            this.pathParams.put("spreadsheetToken", spreadsheetToken);
            return this;
        }
        
        public SpreadsheetsValuesAppendReqCall setInsertDataOption(String insertDataOption){
            this.queryParams.put("insertDataOption", insertDataOption);
            return this;
        }

        @Override
        public Response<SpreadsheetsValuesAppendResult> execute() throws Exception {
            this.optFns.add(Request.setPathParams(this.pathParams));
            this.optFns.add(Request.setQueryParams(this.queryParams));
            Request<SpreadsheetsValuesAppendReqBody, SpreadsheetsValuesAppendResult> request = Request.newRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/values_append", "POST",
                    new AccessTokenType[]{AccessTokenType.Tenant, AccessTokenType.User},
                    this.body, this.result, this.optFns.toArray(new RequestOptFn[]{}));
            return Api.send(this.spreadsheetss.service.config, request);
        }
    }
    public static class SpreadsheetsValuesBatchGetReqCall extends ReqCaller<Object, SpreadsheetsValuesBatchGetResult> {
        private final Spreadsheetss spreadsheetss;
        
        private final Map<String, Object> pathParams;
        private final Map<String, Object> queryParams;
        private final List<RequestOptFn> optFns;
        private SpreadsheetsValuesBatchGetResult result;
        
        private SpreadsheetsValuesBatchGetReqCall(Spreadsheetss spreadsheetss, RequestOptFn... optFns) {
        
            this.pathParams = new HashMap<>();
            this.queryParams = new HashMap<>();
            this.optFns = new ArrayList<>();
            this.optFns.addAll(Arrays.asList(optFns));
            this.result = new SpreadsheetsValuesBatchGetResult();
            this.spreadsheetss = spreadsheetss;
        }
        
        public SpreadsheetsValuesBatchGetReqCall setSpreadsheetToken(String spreadsheetToken){
            this.pathParams.put("spreadsheetToken", spreadsheetToken);
            return this;
        }
        
        public SpreadsheetsValuesBatchGetReqCall setRanges(String... ranges){
            this.queryParams.put("ranges", ranges);
            return this;
        }
        public SpreadsheetsValuesBatchGetReqCall setValueRenderOption(String valueRenderOption){
            this.queryParams.put("valueRenderOption", valueRenderOption);
            return this;
        }
        public SpreadsheetsValuesBatchGetReqCall setDateTimeRenderOption(String dateTimeRenderOption){
            this.queryParams.put("dateTimeRenderOption", dateTimeRenderOption);
            return this;
        }

        @Override
        public Response<SpreadsheetsValuesBatchGetResult> execute() throws Exception {
            this.optFns.add(Request.setPathParams(this.pathParams));
            this.optFns.add(Request.setQueryParams(this.queryParams));
            Request<Object, SpreadsheetsValuesBatchGetResult> request = Request.newRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/values_batch_get", "GET",
                    new AccessTokenType[]{AccessTokenType.Tenant, AccessTokenType.User},
                    null, this.result, this.optFns.toArray(new RequestOptFn[]{}));
            return Api.send(this.spreadsheetss.service.config, request);
        }
    }
    public static class SpreadsheetsValuesBatchUpdateReqCall extends ReqCaller<SpreadsheetsValuesBatchUpdateReqBody, SpreadsheetsValuesBatchUpdateResult> {
        private final Spreadsheetss spreadsheetss;
        
        private final SpreadsheetsValuesBatchUpdateReqBody body;
        private final Map<String, Object> pathParams;
        private final List<RequestOptFn> optFns;
        private SpreadsheetsValuesBatchUpdateResult result;
        
        private SpreadsheetsValuesBatchUpdateReqCall(Spreadsheetss spreadsheetss, SpreadsheetsValuesBatchUpdateReqBody body, RequestOptFn... optFns) {
        
            this.body = body;
            this.pathParams = new HashMap<>();
            this.optFns = new ArrayList<>();
            this.optFns.addAll(Arrays.asList(optFns));
            this.result = new SpreadsheetsValuesBatchUpdateResult();
            this.spreadsheetss = spreadsheetss;
        }
        
        public SpreadsheetsValuesBatchUpdateReqCall setSpreadsheetToken(String spreadsheetToken){
            this.pathParams.put("spreadsheetToken", spreadsheetToken);
            return this;
        }

        @Override
        public Response<SpreadsheetsValuesBatchUpdateResult> execute() throws Exception {
            this.optFns.add(Request.setPathParams(this.pathParams));
            Request<SpreadsheetsValuesBatchUpdateReqBody, SpreadsheetsValuesBatchUpdateResult> request = Request.newRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/values_batch_update", "POST",
                    new AccessTokenType[]{AccessTokenType.Tenant, AccessTokenType.User},
                    this.body, this.result, this.optFns.toArray(new RequestOptFn[]{}));
            return Api.send(this.spreadsheetss.service.config, request);
        }
    }
    public static class SpreadsheetsValuesGetReqCall extends ReqCaller<Object, SpreadsheetsValuesGetResult> {
        private final Spreadsheetss spreadsheetss;
        
        private final Map<String, Object> pathParams;
        private final Map<String, Object> queryParams;
        private final List<RequestOptFn> optFns;
        private SpreadsheetsValuesGetResult result;
        
        private SpreadsheetsValuesGetReqCall(Spreadsheetss spreadsheetss, RequestOptFn... optFns) {
        
            this.pathParams = new HashMap<>();
            this.queryParams = new HashMap<>();
            this.optFns = new ArrayList<>();
            this.optFns.addAll(Arrays.asList(optFns));
            this.result = new SpreadsheetsValuesGetResult();
            this.spreadsheetss = spreadsheetss;
        }
        
        public SpreadsheetsValuesGetReqCall setSpreadsheetToken(String spreadsheetToken){
            this.pathParams.put("spreadsheetToken", spreadsheetToken);
            return this;
        }
        public SpreadsheetsValuesGetReqCall setRange(String range){
            this.pathParams.put("range", range);
            return this;
        }
        
        public SpreadsheetsValuesGetReqCall setValueRenderOption(String valueRenderOption){
            this.queryParams.put("valueRenderOption", valueRenderOption);
            return this;
        }
        public SpreadsheetsValuesGetReqCall setDateTimeRenderOption(String dateTimeRenderOption){
            this.queryParams.put("dateTimeRenderOption", dateTimeRenderOption);
            return this;
        }

        @Override
        public Response<SpreadsheetsValuesGetResult> execute() throws Exception {
            this.optFns.add(Request.setPathParams(this.pathParams));
            this.optFns.add(Request.setQueryParams(this.queryParams));
            Request<Object, SpreadsheetsValuesGetResult> request = Request.newRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/values/:range", "GET",
                    new AccessTokenType[]{AccessTokenType.Tenant, AccessTokenType.User},
                    null, this.result, this.optFns.toArray(new RequestOptFn[]{}));
            return Api.send(this.spreadsheetss.service.config, request);
        }
    }
    public static class SpreadsheetsValuesImageReqCall extends ReqCaller<SpreadsheetsValuesImageReqBody, SpreadsheetsValuesImageResult> {
        private final Spreadsheetss spreadsheetss;
        
        private final SpreadsheetsValuesImageReqBody body;
        private final Map<String, Object> pathParams;
        private final List<RequestOptFn> optFns;
        private SpreadsheetsValuesImageResult result;
        
        private SpreadsheetsValuesImageReqCall(Spreadsheetss spreadsheetss, SpreadsheetsValuesImageReqBody body, RequestOptFn... optFns) {
        
            this.body = body;
            this.pathParams = new HashMap<>();
            this.optFns = new ArrayList<>();
            this.optFns.addAll(Arrays.asList(optFns));
            this.result = new SpreadsheetsValuesImageResult();
            this.spreadsheetss = spreadsheetss;
        }
        
        public SpreadsheetsValuesImageReqCall setSpreadsheetToken(String spreadsheetToken){
            this.pathParams.put("spreadsheetToken", spreadsheetToken);
            return this;
        }

        @Override
        public Response<SpreadsheetsValuesImageResult> execute() throws Exception {
            this.optFns.add(Request.setPathParams(this.pathParams));
            Request<SpreadsheetsValuesImageReqBody, SpreadsheetsValuesImageResult> request = Request.newRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/values_image", "POST",
                    new AccessTokenType[]{AccessTokenType.Tenant, AccessTokenType.User},
                    this.body, this.result, this.optFns.toArray(new RequestOptFn[]{}));
            return Api.send(this.spreadsheetss.service.config, request);
        }
    }
    public static class SpreadsheetsValuesPrependReqCall extends ReqCaller<SpreadsheetsValuesPrependReqBody, SpreadsheetsValuesPrependResult> {
        private final Spreadsheetss spreadsheetss;
        
        private final SpreadsheetsValuesPrependReqBody body;
        private final Map<String, Object> pathParams;
        private final List<RequestOptFn> optFns;
        private SpreadsheetsValuesPrependResult result;
        
        private SpreadsheetsValuesPrependReqCall(Spreadsheetss spreadsheetss, SpreadsheetsValuesPrependReqBody body, RequestOptFn... optFns) {
        
            this.body = body;
            this.pathParams = new HashMap<>();
            this.optFns = new ArrayList<>();
            this.optFns.addAll(Arrays.asList(optFns));
            this.result = new SpreadsheetsValuesPrependResult();
            this.spreadsheetss = spreadsheetss;
        }
        
        public SpreadsheetsValuesPrependReqCall setSpreadsheetToken(String spreadsheetToken){
            this.pathParams.put("spreadsheetToken", spreadsheetToken);
            return this;
        }

        @Override
        public Response<SpreadsheetsValuesPrependResult> execute() throws Exception {
            this.optFns.add(Request.setPathParams(this.pathParams));
            Request<SpreadsheetsValuesPrependReqBody, SpreadsheetsValuesPrependResult> request = Request.newRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/values_prepend", "POST",
                    new AccessTokenType[]{AccessTokenType.Tenant, AccessTokenType.User},
                    this.body, this.result, this.optFns.toArray(new RequestOptFn[]{}));
            return Api.send(this.spreadsheetss.service.config, request);
        }
    }
    public static class SpreadsheetsValuesUpdateReqCall extends ReqCaller<SpreadsheetsValuesUpdateReqBody, SpreadsheetsValuesUpdateResult> {
        private final Spreadsheetss spreadsheetss;
        
        private final SpreadsheetsValuesUpdateReqBody body;
        private final Map<String, Object> pathParams;
        private final List<RequestOptFn> optFns;
        private SpreadsheetsValuesUpdateResult result;
        
        private SpreadsheetsValuesUpdateReqCall(Spreadsheetss spreadsheetss, SpreadsheetsValuesUpdateReqBody body, RequestOptFn... optFns) {
        
            this.body = body;
            this.pathParams = new HashMap<>();
            this.optFns = new ArrayList<>();
            this.optFns.addAll(Arrays.asList(optFns));
            this.result = new SpreadsheetsValuesUpdateResult();
            this.spreadsheetss = spreadsheetss;
        }
        
        public SpreadsheetsValuesUpdateReqCall setSpreadsheetToken(String spreadsheetToken){
            this.pathParams.put("spreadsheetToken", spreadsheetToken);
            return this;
        }

        @Override
        public Response<SpreadsheetsValuesUpdateResult> execute() throws Exception {
            this.optFns.add(Request.setPathParams(this.pathParams));
            Request<SpreadsheetsValuesUpdateReqBody, SpreadsheetsValuesUpdateResult> request = Request.newRequest("/open-apis/sheets/v2/spreadsheets/:spreadsheetToken/values", "PUT",
                    new AccessTokenType[]{AccessTokenType.Tenant, AccessTokenType.User},
                    this.body, this.result, this.optFns.toArray(new RequestOptFn[]{}));
            return Api.send(this.spreadsheetss.service.config, request);
        }
    }

}
